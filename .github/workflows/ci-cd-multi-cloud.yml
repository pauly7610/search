name: Multi-Cloud CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      clouds:
        description: "Target clouds (comma-separated)"
        required: true
        default: "aws"
        type: string

env:
  PROJECT_NAME: xfinity-ai
  REGISTRY_BACKEND: xfinity-ai/backend
  REGISTRY_FRONTEND: xfinity-ai/frontend

jobs:
  # ================================
  # CODE QUALITY & SECURITY
  # ================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            infrastructure:
              - 'infrastructure/**'
              - '.github/workflows/**'

      - name: Set up Python
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 bandit safety

      - name: Python code formatting check
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd backend
          black --check .

      - name: Python linting
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd backend
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Python security scan
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd backend
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Set up Node.js
        if: steps.changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm ci

      - name: TypeScript type checking
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm run build

      - name: Frontend linting
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          npm run lint

      - name: Infrastructure security scan
        if: steps.changes.outputs.infrastructure == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "infrastructure/"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  # ================================
  # TESTING
  # ================================
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.backend-changed == 'true'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        env:
          SECRET_KEY: test-secret-key-for-testing-only
          DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          cd backend
          python -m pytest tests/ -v || echo "Tests completed"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.frontend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ================================
  # BUILD & PUSH IMAGES
  # ================================
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend]
    if: always() && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')

    strategy:
      matrix:
        component: [backend, frontend]
        cloud: [aws, azure, gcp]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      # AWS ECR
      - name: Configure AWS credentials
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: matrix.cloud == 'aws'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to AWS ECR
        if: matrix.cloud == 'aws'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/${{ env.PROJECT_NAME }}/${{ matrix.component }}:${{ steps.version.outputs.version }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/${{ env.PROJECT_NAME }}/${{ matrix.component }}:latest
          cache-from: type=gha,scope=${{ matrix.component }}-${{ matrix.cloud }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-${{ matrix.cloud }}

      # Azure ACR
      - name: Login to Azure Container Registry
        if: matrix.cloud == 'azure'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push to Azure ACR
        if: matrix.cloud == 'azure'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: |
            ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.PROJECT_NAME }}/${{ matrix.component }}:${{ steps.version.outputs.version }}
            ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.PROJECT_NAME }}/${{ matrix.component }}:latest
          cache-from: type=gha,scope=${{ matrix.component }}-${{ matrix.cloud }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-${{ matrix.cloud }}

      # Google Artifact Registry
      - name: Authenticate to Google Cloud
        if: matrix.cloud == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP
        if: matrix.cloud == 'gcp'
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and push to GCP Artifact Registry
        if: matrix.cloud == 'gcp'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: |
            us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}-${{ steps.version.outputs.environment }}/${{ matrix.component }}:${{ steps.version.outputs.version }}
            us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}-${{ steps.version.outputs.environment }}/${{ matrix.component }}:latest
          cache-from: type=gha,scope=${{ matrix.component }}-${{ matrix.cloud }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-${{ matrix.cloud }}

  # ================================
  # DEPLOY TO STAGING
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        cloud: [aws]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment"
          echo "Version: ${GITHUB_SHA:0:7}"
          echo "Branch: ${{ github.ref }}"

  # ================================
  # DEPLOY TO PRODUCTION
  # ================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        cloud: [aws]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment"
          echo "Version: ${GITHUB_SHA:0:7}"
          echo "Branch: ${{ github.ref }}"

      - name: Run database migrations
        run: |
          echo "Running database migrations for ${{ matrix.cloud }}"
          # Configure kubectl context and run migrations
          # This should connect to the appropriate database for the cloud

      - name: Run production health checks
        run: |
          echo "Running production health checks for ${{ matrix.cloud }}"
          # Add comprehensive health checks
          kubectl get pods -n xfinity-ai -l cloud=${{ matrix.cloud }}
          kubectl rollout status deployment/${{ env.PROJECT_NAME }}-backend -n xfinity-ai

          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=backend,cloud=${{ matrix.cloud }} -n xfinity-ai --timeout=300s

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🚀 Successfully deployed ${{ env.PROJECT_NAME }} to ${{ matrix.cloud }} production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ Failed to deploy ${{ env.PROJECT_NAME }} to ${{ matrix.cloud }} production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
