# Common configuration that works with your existing backend/src/config/settings.py
global:
  projectName: xfinity-ai
  namespace: xfinity-ai
  image:
    backend:
      repository: xfinity-ai/backend
      tag: v2.0.0
      pullPolicy: Always
    frontend:
      repository: xfinity-ai/frontend
      tag: v2.0.0
      pullPolicy: Always

# Backend configuration (matches your Settings class)
backend:
  replicaCount: 3

  # Environment variables that match your src/config/settings.py
  env:
    APP_NAME: "Xfinity AI Agent Platform"
    VERSION: "1.0.0"
    ENVIRONMENT: "production"
    DEBUG: "false"

    # API Configuration
    API_V1_STR: "/api/v1"
    ACCESS_TOKEN_EXPIRE_MINUTES: "30"

    # Database (will be overridden per cloud)
    DATABASE_POOL_SIZE: "5"
    DATABASE_MAX_OVERFLOW: "10"
    DATABASE_POOL_TIMEOUT: "30"

    # Redis (will be overridden per cloud)
    REDIS_CACHE_TTL: "300"

    # OpenAI Configuration
    OPENAI_MODEL: "gpt-3.5-turbo"
    OPENAI_TEMPERATURE: "0.7"
    OPENAI_MAX_TOKENS: "1000"

    # WebSocket Configuration
    WS_HEARTBEAT_INTERVAL: "30"
    WS_MAX_CONNECTIONS: "1000"

    # Monitoring Configuration
    ENABLE_METRICS: "true"
    ENABLE_TRACING: "false"

    # Rate Limiting
    RATE_LIMIT_PER_MINUTE: "60"
    RATE_LIMIT_BURST: "10"

    # Logging Configuration
    LOG_LEVEL: "INFO"
    LOG_FORMAT: "json"

  # Resources that match your existing deployment
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  # Service configuration
  service:
    type: ClusterIP
    port: 8000
    metricsPort: 8001

  # Health checks
  healthcheck:
    enabled: true
    livenessPath: "/health"
    readinessPath: "/health"

# Frontend configuration
frontend:
  replicaCount: 2

  env:
    REACT_APP_ENV: "production"

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

  service:
    type: ClusterIP
    port: 80

# Monitoring (matches your existing Prometheus config)
monitoring:
  prometheus:
    enabled: true
    scrapeInterval: "15s"

  grafana:
    enabled: true

  alerts:
    enabled: true

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
